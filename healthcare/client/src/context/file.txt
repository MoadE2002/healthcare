"use client"
import React, { 
  createContext, 
  useContext, 
  useEffect, 
  useState, 
  useCallback 
} from 'react';
import io, { Socket } from 'socket.io-client';
import axiosInstance from '../apicalls/axiosInstance';
import { useAuthContext } from '../hooks/useAuthContext';

// Interfaces
interface Notification {
  _id: string;  
  user: string;
  type: string;
  title?: string;
  message: string;
  isRead?: boolean;
  createdAt?: Date;
  prescription_id?: string;
  appointmentId?: string;
  data?: {
    appointmentId?: string;
    pdfUrl?: string;
    callRoomId?: string;
    appointmentTime?: string;
    additionalDetails?: any;
  };
}

interface ChatMessage {
  sender: string;
  text: string;
  timestamp: Date;
  roomId?: string;
}

interface ChatMessages {
  [roomId: string]: ChatMessage[];
}

interface SocketContextType {
  socket: Socket | null;
  isConnected: boolean;
  notifications: {
    unread: Notification[];
    read: Notification[];
  };
  chatMessages: ChatMessages;
  
  // Message methods
  sendMessage: (roomId: string, message: string) => void;
  
  // Call methods
  initiateCall: (recipientId: string, roomId: string) => void;
  respondToCall: (roomId: string, accepted: boolean, sender: string) => void;
  joinRoom: (roomId: string) => void;
  sendOffer: (roomId: string, sdp: any) => void;
  endCall: (roomId: string, reason?: string) => void;
  sendFeedback: (roomId: string, feedback: string, rating?: number, doctorId?: string) => void;
  leaveRoom : (roomId: string)=>void
  // Notification methods
  markNotificationAsRead: (notificationId: string) => Promise<void>;
  clearNotifications: () => Promise<void>;
  fetchNotifications: () => Promise<void>;
}

const SocketContext = createContext<SocketContextType | null>(null);

export const SocketProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const { user } = useAuthContext();
  const [socket, setSocket] = useState<Socket | null>(null);
  const [isConnected, setIsConnected] = useState(false);
  const [notifications, setNotifications] = useState<{
    unread: Notification[];
    read: Notification[];
  }>({
    unread: [],
    read: []
  });
  
  const [chatMessages, setChatMessages] = useState<ChatMessages>({});

  const initiateCall = useCallback((recipientId: string, roomId: string) => {
    if (socket && user?._id) {
      socket.emit('send-call', {
        roomId,
        receivedId: recipientId,
        senderId: user._id
      });
    } else {
      console.warn('Cannot initiate call: Socket or user not available');
    }
  }, [socket, user]);

  const respondToCall = useCallback((roomId: string, accepted: boolean, sender: string) => {
    if (socket && user?._id) {
      if (accepted) {
        socket.emit('join-room', { roomId, userId: user._id });
      } else {
        socket.emit('rejected', {
          roomId,
          decliner: user._id,
          caller: sender
        });
      }
    } else {
      console.warn('Cannot respond to call: Socket or incoming call details not available');
    }
  }, [socket, user]);

  const joinRoom = useCallback((roomId: string) => {
    console.log('Joining room:', roomId);
    if (socket && user?._id) {
      socket.emit('join-room', { 
        roomId, 
        userId: user._id 
      });
    } else {
      console.warn('Cannot join room: Socket or user not available');
    }
  }, [socket, user]);

  const sendOffer = useCallback((roomId: string, sdp: any) => {
    console.log('Sending offer:', { roomId, sdp });
    if (socket && user?._id) {
      socket.emit('offer', { 
        roomId, 
        sdp, 
        userId: user._id 
      });
    } else {
      console.warn('Cannot send offer: Socket or user not available');
    }
  }, [socket, user]);

  const endCall = useCallback((roomId: string, reason?: string) => {
    console.log('Ending call:', { roomId, reason });
    if (socket && user?._id) {
      socket.emit('end-call', { 
        roomId, 
        userId: user._id,
        reason
      });
    } else {
      console.warn('Cannot end call: Socket or user not available');
    }
  }, [socket, user]);


  const leaveRoom = useCallback((roomId: string) => {
    if (socket && user?._id) {
        socket.emit('leave-room', { 
          roomId, 
          socketId: socket.id 
        });
    } else {
      console.warn('Cannot end call: Socket or user not available');
    }
  }, [socket, user]);


    

  const sendFeedback = useCallback((roomId: string, feedback: string, rating?: number, doctorId?: string) => {
    console.log('Sending feedback:', { roomId, feedback, rating, doctorId });
    if (socket && user?._id) {
      socket.emit('call-feedback', { 
        roomId, 
        userId: user._id,
        feedback, 
        rating, 
        doctorId
      });
    } else {
      console.warn('Cannot send feedback: Socket or user not available');
    }
  }, [socket, user]);

  const sendMessage = useCallback((roomId: string, message: string) => {
    if (socket && user?._id) {
      const newMessage: ChatMessage = {
        sender: user._id,
        text: message,
        timestamp: new Date(),
        roomId: roomId
      };

      socket.emit('send_message', {
        message,
        roomId,
        userId: user._id
      });

      setChatMessages(prev => ({
        ...prev,
        [roomId]: [...(prev[roomId] || []), newMessage]
      }));
    } else {
      console.warn('Cannot send message: Socket or user not available');
    }
  }, [socket, user]);

  const fetchNotifications = useCallback(async () => {
    if (!user) return;

    try {
      const response = await axiosInstance.get(`/notifications/${user._id}`);

      setNotifications({
        unread: response.data.unread.map((notif: Notification) => ({
          ...notif,
          createdAt: new Date(notif.createdAt || Date.now())
        })),
        read: response.data.read.map((notif: Notification) => ({
          ...notif,
          createdAt: new Date(notif.createdAt || Date.now())
        }))
      });
    } catch (error) {
      console.error('Failed to fetch notifications', error);
    }
  }, [user]);

  const markNotificationAsRead = useCallback(async (notificationId: string) => {
    try {
      await axiosInstance.patch(`/notifications/${notificationId}/read`);
  
      setNotifications(prev => {
        const notificationToMove = prev.unread.find(n => n._id === notificationId);
        
        if (!notificationToMove) return prev;
  
        return {
          unread: prev.unread.filter(n => n._id !== notificationId),
          read: [
            { ...notificationToMove, isRead: true },
            ...prev.read
          ]
        };
      });
    } catch (error) {
      console.error('Failed to mark notification as read', error);
    }
  }, []);

  const clearNotifications = useCallback(async () => {
    try {
      await axiosInstance.delete(`/notifications/${user._id}`);

      setNotifications({ unread: [], read: [] });
    } catch (error) {
      console.error('Failed to clear notifications', error);
    }
  }, [user]);

  // Socket Connection Effect
  useEffect(() => {
    if (user && user.token) {
      const newSocket = io('http://localhost:8000', {
        auth: { token: user.token },
        reconnection: true,
        reconnectionAttempts: 20,
        reconnectionDelay: 1000
      });

      const handleConnect = () => {
        console.log('Socket connected');
        setIsConnected(true);

        if (user._id) {
          newSocket.emit('register-user', { 
            userId: user._id, 
            deviceToken: user.token
          });
        }
      };

      const handleDisconnect = () => {
        console.log('Socket disconnected');
        setIsConnected(false);
      };

      const handleReceiveMessage = (messageData: { message: string, roomId: string, userId: string }) => {
        const { message, roomId, userId } = messageData;

        setChatMessages(prev => ({
          ...prev,
          [roomId]: [
            ...(prev[roomId] || []),
            {
              sender: userId,
              text: message,
              timestamp: new Date(),
              roomId: roomId
            }
          ]
        }));
      };

      const handleRoomParticipants = (participants: { userId: string, socketId: string }[]) => {
        console.log('Room Participants:', participants);
      };

      const handleNewParticipant = (participant: { userId: string, socketId: string }) => {
        console.log('New Participant:', participant);
      };

      const handleNotification = (notification) => {
        const processedNotification = {
          ...notification,
          data: {
            prescriptionId:
              notification?.data?.prescription_id ||
              notification?.data?.prescriptionId ||
              (notification as any)?.prescription_id || 
              null,
            appointmentId: notification?.data?.appointmentId || null,
          },
          type: notification.type, // Ensure `type` is included in processed data
          createdAt: new Date(), // Add timestamp for new notifications
          isRead: false, // Default to unread
        };
      
        setNotifications((prev) => ({
          unread: [processedNotification, ...prev.unread], 
          read: prev.read, 
        }));
      };
      

      // Socket event listeners
      newSocket.on('connect', handleConnect);
      newSocket.on('disconnect', handleDisconnect);
      newSocket.on('receive_message', handleReceiveMessage);
      newSocket.on('room-participants', handleRoomParticipants);
      newSocket.on('new-participant', handleNewParticipant);
      newSocket.on('notification', handleNotification);

      setSocket(newSocket);
      fetchNotifications();

      return () => {
        // Clean up event listeners
        newSocket.off('connect', handleConnect);
        newSocket.off('disconnect', handleDisconnect);
        newSocket.off('receive_message', handleReceiveMessage);
        newSocket.off('room-participants', handleRoomParticipants);
        newSocket.off('new-participant', handleNewParticipant);
        newSocket.off('notification', handleNotification);
        
        newSocket.disconnect();
      };
    }
  }, [user, fetchNotifications]);

  // Provide context value
  const contextValue: SocketContextType = {
    socket, 
    isConnected, 
    notifications,
    chatMessages,
    sendMessage,
    initiateCall,
    respondToCall,
    joinRoom, 
    sendOffer,
    endCall,
    leaveRoom,
    sendFeedback,
    markNotificationAsRead,
    clearNotifications,
    fetchNotifications
  };

  return (
    <SocketContext.Provider value={contextValue}>
      {children}
    </SocketContext.Provider>
  );
};

export const useSocket = () => {
  const context = useContext(SocketContext);
  if (context === null) {
    throw new Error('useSocket must be used within a SocketProvider');
  }
  return context;
};